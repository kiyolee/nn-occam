#INCLUDE "hostio.inc"
#USE "hostio.lib"
#USE "convert.lib"
#USE "string.lib"

#USE "rand.t4h"
#USE "waitkey.t4h"

PROC select.max.output (VAL []REAL32 y.out, INT sel)
  VAL y.size IS SIZE y.out :
  REAL32 max.val :
  SEQ
    sel := 0
    max.val := y.out[0]
    SEQ i = 1 FOR y.size-1
      IF
	y.out[i] > max.val
	  SEQ
	    sel := i
	    max.val := y.out[i]
	TRUE
	  SKIP
:

PROC select.min.output (VAL []REAL32 y.out, INT sel)
  VAL y.size IS SIZE y.out :
  REAL32 min.val :
  SEQ
    sel := 0
    min.val := y.out[0]
    SEQ i = 1 FOR y.size-1
      IF
	y.out[i] < min.val
	  SEQ
	    sel := i
	    min.val := y.out[i]
	TRUE
	  SKIP
:

PROC print.stat (CHAN OF SP fs, ts, VAL []INT st)
  VAL st.size IS SIZE st :
  INT sum :
  SEQ
    so.write.char (fs, ts, '[')
    sum := 0
    SEQ i = 0 FOR st.size
      SEQ
	so.write.int (fs, ts, st[i], 5)
	sum := sum + st[i]
    so.write.char (fs, ts, ']')
    so.write.int (fs, ts, sum, 5)
    so.write.nl (fs, ts)
:

PROC print.count (CHAN OF SP fs, ts, INT cnt, VAL INT interval)
  SEQ
    IF
      (cnt REM interval) = 0
	SEQ
	  so.write.int (fs, ts, cnt, 4)
	  so.write.char (fs, ts, '*c')
      TRUE
	SKIP
    cnt := cnt + 1
:

PROC show.time (CHAN OF SP fs, ts)
  INT32 loct, utct :
  SEQ
    so.time (fs, ts, loct, utct)
    so.write.string (fs, ts, "CURRENT TIME = ")
    so.write.int (fs, ts, INT loct, 0)
    so.write.nl (fs, ts)
:

PROC so.write.str.int.nl (CHAN OF SP fs, ts, VAL []BYTE str,
			  VAL INT i, VAL INT w)
  SEQ
    so.write.string (fs, ts, str)
    so.write.int (fs, ts, i, w)
    so.write.nl (fs, ts)
:

PROC so.write.str.real32.nl (CHAN OF SP fs, ts, VAL []BYTE str,
			     VAL REAL32 r, VAL INT f1, f2)
  SEQ
    so.write.string (fs, ts, str)
    so.write.real32 (fs, ts, r, f1, f2)
    so.write.nl (fs, ts)
:

PROC show.time.int (CHAN OF SP fs, ts, VAL INT i, VAL INT w)
  SEQ
    show.time (fs, ts)
    so.write.int (fs, ts, i, w)
    so.write.char (fs, ts, ' ')
:

PROC current.time (CHAN OF SP fs, ts, INT32 tm)
  INT32 utct :
  so.time (fs, ts, tm, utct)
:

PROC shuffle ([]INT suf, INT32 seed)
  VAL suf.size IS SIZE suf :
  SEQ
    SEQ i = 0 FOR suf.size
      suf[i] := i
    SEQ i = 0 FOR 10
      INT r1, r2, t :
      SEQ
	r1, seed := rand (seed)
	r2, seed := rand (seed)
	r1 := r1 REM suf.size
	r2 := r2 REM suf.size
	t := suf[r1]
	suf[r1] := suf[r2]
	suf[r2] := t
:

PROC int2str.0lead (INT len, []BYTE buf, VAL INT val)
  VAL buf.sz IS SIZE buf :
  VAL max.len IS 20 :
  [max.len]BYTE buf2 :
  INT len2 :
  SEQ
    len2 := max.len
    INTTOSTRING (len2, buf2, val)
    IF
      len2 > max.len
	len2 := max.len
      TRUE
	SKIP
    IF
      len > buf.sz
	len := buf.sz
      len < 1
	len := 1
      TRUE
	SKIP
    IF
      len2 > len
	SEQ i = 0 FOR len
	  buf[(len-1)-i] := buf2[(len2-1)-i]
      len > 0
	SEQ
	  SEQ i = 0 FOR len2
	    buf[(len-1)-i] := buf2[(len2-1)-i]
	  SEQ i = 0 FOR (len-len2)
	    buf[i] := '0'
      TRUE
	SKIP
:

PROC gen.filename ([]BYTE filename, VAL []BYTE prefix, VAL []BYTE subfix,
		   VAL INT index, VAL INT width)
  VAL max.width IS 10 :
  [max.width]BYTE idx :
  INT len, l :
  SEQ
    len := 0
    append.text (len, filename, prefix)
    l := width
    int2str.0lead (l, idx, index)
    append.text (len, filename, [idx FROM 0 FOR l])
    append.text (len, filename, subfix)
    append.char (len, filename, 0 (BYTE))
:
