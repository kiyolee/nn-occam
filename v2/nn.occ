#INCLUDE "hostio.inc"
#USE "hostio.lib"

#INCLUDE "la.inc"
#USE "la.t4h"

#USE "rand.t4h"
#USE "fdrd.t4h"
#USE "waitkey.t4h"

PROC main (CHAN OF SP fs, ts, []INT memory)

  PROC open.msg (CHAN OF SP fs, ts, VAL [no.sample]BYTE res)
    SEQ
      so.write.nl (fs, ts)
      SEQ i = 0 FOR no.sample
	SEQ
	  so.write.string (fs, ts, "OPEN FILE #")
	  so.write.int (fs, ts, i+1, 2)
	  IF
	    res[i] = spr.ok
	      so.write.string (fs, ts, " OK*n")
	    TRUE
	      so.write.string (fs, ts, " FAIL*n")
      so.write.nl (fs, ts)
  :

  PROC next.data (CHAN OF SP fs, ts, VAL [no.sample]INT32 sid,
		  INT sel, [no.input]REAL32 fdat, BYTE res)
    SEQ
      IF
	sel < 0
	  sel := 0
	sel >= no.sample
	  sel := no.sample - 1
	TRUE
	  SKIP
      read.float.data (fs, ts, sid[sel], fdat, res)
      sel := sel + 1
      IF
	sel >= no.sample
	  sel := 0
	TRUE
	  SKIP
  :

  PROC display.output (CHAN OF SP fs, ts, VAL [no.pe]REAL32 y.out,
		       VAL INT sel, VAL []BYTE hd)
    SEQ i = 0 FOR no.pe
      IF
	y.out[i] > 0.0 (REAL32)
	  SEQ
	    so.write.string (fs, ts, hd)
	    so.write.string (fs, ts, "OUTPUT #")
	    so.write.int (fs, ts, i+1, 2)
	    so.write.string (fs, ts, " = ")
	    so.write.real32 (fs, ts, y.out[i], 0, 10)
	    IF
	      i = sel
		so.write.string (fs, ts, " OK")
	      TRUE
		SKIP
	    so.write.nl (fs, ts)
	TRUE
	  SKIP
  :

  PROC check.output (CHAN OF SP fs, ts, VAL [no.pe]REAL32 y.out, VAL INT sel)
    BOOL flag :
    SEQ
      flag := FALSE
      SEQ i = 0 FOR no.pe
	IF
	  (y.out[i] > 0.0 (REAL32)) AND (i <> sel)
	    SEQ
	      so.write.string (fs, ts, "*n#")
	      so.write.int (fs, ts, i, 2)
	      so.write.string (fs, ts, " ERROR")
	      flag := TRUE
	  TRUE
	    SKIP
      IF
	flag
	  so.write.nl (fs, ts)
	TRUE
	  SKIP
  :

  PROC select.max.output (CHAN OF SP fs, ts, VAL [no.pe]REAL32 y.out, INT sel)
    REAL32 max.val :
    SEQ
      sel := -1
      max.val := 0.0 (REAL32)
      SEQ i = 0 FOR no.pe
	IF
	  y.out[i] > max.val
	    SEQ
	      sel := i
	      max.val := y.out[i]
	  TRUE
	    SKIP
  :

  PROC la.training (CHAN OF SP fs, ts,
		    [no.pe]CHAN OF INT16 ctrl,
		    [no.pe][no.input]CHAN OF REAL32 inp,
		    [no.pe]CHAN OF REAL32 outp,
		    [no.pe]CHAN OF REAL32 linp)
    [no.sample]INT32 sid :
    [no.sample]BYTE result :
    BOOL success :
    BYTE key :
    SEQ
      key := 0 (BYTE)
      open.all.float.data (fs, ts, sid, result, success)
      open.msg (fs, ts, result)
      -- wait.key (fs, ts, key)
      IF
	success -- TRAINING
	  BYTE res :
	  INT sel, osel, cnt :
	  [no.input]REAL32 y :
	  [no.pe]REAL32 y.out :
	  SEQ
	    sel := 0
	    cnt := 1
	    res := spr.ok
	    WHILE res = spr.ok
	      SEQ
		so.write.int (fs, ts, cnt, 4)
		-- so.write.int (fs, ts, sel+1, 3)
		so.write.char (fs, ts, '*c')
		cnt := cnt + 1
		osel := sel
		next.data (fs, ts, sid, sel, y, res)
		IF
		  res = spr.ok
		    SEQ
		      -- so.write.string (fs, ts, " OK   *c")
		      PAR i = 0 FOR no.pe
			SEQ
			  ctrl[i] ! la.ctrl.learn
			  PAR
			    PAR j = 0 FOR no.input
			      inp[i][j] ! y[j]
			    IF
			      osel = i
				linp[i] ! 1.0 (REAL32)
			      TRUE
				linp[i] ! -1.0 (REAL32)
		      -- PAR i = 0 FOR no.pe
		      --   SEQ
		      --     ctrl[i] ! la.ctrl.operate
		      --     PAR j = 0 FOR no.input
		      --       inp[i][j] ! y[j]
		      --     outp[i] ? y.out[i]
		      -- check.output (fs, ts, y.out, osel)
		      -- display.output (fs, ts, y.out, osel, "")
		      -- wait.key (fs, ts, key)
		  TRUE -- read data error
		    SKIP
		-- so.write.nl (fs, ts)
	TRUE -- NOT success
	  SKIP
      so.write.nl (fs, ts)
      close.all.float.data (fs, ts, sid, result, success)
  :

  PROC print.stat (CHAN OF SP fs, ts, VAL [no.pe]INT st)
    SEQ
      so.write.char (fs, ts, '[')
      SEQ i = 0 FOR no.pe
	so.write.int (fs, ts, st[i], 5)
      so.write.string.nl (fs, ts, "]")
  :

  PROC la.operate (CHAN OF SP fs, ts,
		   [no.pe]CHAN OF INT16 ctrl,
		   [no.pe][no.input]CHAN OF REAL32 inp,
		   [no.pe]CHAN OF REAL32 outp,
		   [no.pe]CHAN OF REAL32 linp)
    [no.sample]INT32 sid :
    [no.sample]BYTE result :
    BOOL success :
    BYTE key :
    SEQ
      key := 0 (BYTE)
      open.all.float.data (fs, ts, sid, result, success)
      open.msg (fs, ts, result)
      -- wait.key (fs, ts, key)
      IF
	success -- OPERATING
	  BYTE res :
	  INT sel, osel, msel, cnt :
	  [no.input]REAL32 y :
	  [no.pe]REAL32 y.out :
	  [no.pe]INT right, wrong, wrong.match, unknown :
	  SEQ
	    SEQ i = 0 FOR no.pe
	      SEQ
		right[i] := 0
		wrong[i] := 0
		wrong.match[i] := 0
		unknown[i] := 0
	    sel := 0
	    cnt := 1
	    res := spr.ok
	    WHILE res = spr.ok
	      SEQ
		so.write.int (fs, ts, cnt, 4)
		so.write.int (fs, ts, sel+1, 3)
		cnt := cnt + 1
		osel := sel
		next.data (fs, ts, sid, sel, y, res)
		IF
		  res = spr.ok
		    SEQ
		      -- so.write.string (fs, ts, " OK   *n")
		      so.write.string (fs, ts, " MATCH = ")
		      PAR i = 0 FOR no.pe
			SEQ
			  ctrl[i] ! la.ctrl.operate
			  PAR j = 0 FOR no.input
			    inp[i][j] ! y[j]
			  outp[i] ? y.out[i]
		      select.max.output (fs, ts, y.out, msel)
		      IF
			msel >= 0
			  SEQ
			    so.write.int (fs, ts, msel+1, 2)
			    IF
			      osel <> msel
				SEQ
				  so.write.string (fs, ts, " (ERROR)")
				  wrong[osel] := wrong[osel] + 1
				  wrong.match[msel] := wrong.match[msel] + 1
			      TRUE
				SEQ
				  right[osel] := right[osel] + 1
			TRUE
			  SEQ
			    so.write.string (fs, ts, "UNKNOWN")
			    unknown[osel] := unknown[osel] + 1
		      -- display.output (fs, ts, y.out, osel, "OPERATE ")
		      -- wait.key (fs, ts, key)
		  TRUE -- read data error
		    SKIP
		so.write.nl (fs, ts)
	    print.stat (fs, ts, right)
	    print.stat (fs, ts, wrong)
	    print.stat (fs, ts, unknown)
	    print.stat (fs, ts, wrong.match)
	TRUE -- NOT success
	  SKIP
      close.all.float.data (fs, ts, sid, result, success)
  :

  [no.pe+1]CHAN OF SP fu, tu :
  CHAN OF BOOL mux.stopper :
  SEQ
    PAR
      so.multiplexor (fs, ts, fu, tu, mux.stopper)
      SEQ
	[no.pe]CHAN OF INT16 ctrl :
	[no.pe][no.input]CHAN OF REAL32 inp :
	[no.pe]CHAN OF REAL32 outp :
	[no.pe]CHAN OF REAL32 linp :
	PAR
	  PAR i = 0 FOR no.pe
	    la.pe (i, tu[i], fu[i], ctrl[i], inp[i], outp[i], linp[i])
	  SEQ
	    PAR i = 0 FOR no.pe
	      ctrl[i] ! la.ctrl.init
	    REAL32 lr :
	    BOOL err :
	    SEQ
	      so.write.string (tu[no.pe], fu[no.pe], "LEARNING RATE? ")
	      so.read.echo.real32 (tu[no.pe], fu[no.pe], lr, err)
	      so.write.nl (tu[no.pe], fu[no.pe])
	      IF
		err
		  SKIP
		TRUE
		  SEQ
		    so.write.string (tu[no.pe], fu[no.pe],
		      "NEW LEARNING RATE = ")
		    so.write.real32 (tu[no.pe], fu[no.pe], lr, 0, 0)
		    so.write.nl (tu[no.pe], fu[no.pe])
		    PAR i = 0 FOR no.pe
		      SEQ
			ctrl[i] ! la.ctrl.change.learning.rate
			linp[i] ! lr
	    la.training (tu[no.pe], fu[no.pe], ctrl, inp, outp, linp)
	    la.operate (tu[no.pe], fu[no.pe], ctrl, inp, outp, linp)
	    PAR i = 0 FOR no.pe
	      ctrl[i] ! la.ctrl.kill
	mux.stopper ! TRUE
    so.exit (fs, ts, sps.success)
:
